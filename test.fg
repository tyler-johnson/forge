# a function to be used elsewhere that hashes passwords
# takes two arguments, the password and the salt
function hash_password(pass salt) {
  return pbkdf2(pass salt 10000 32 sha256)
}

# randomly generate the salt when the user changes passwords
computed salt {
  ok draft.password
  return random_string(32)
}

# generate the password hash from the password and salt
computed derived_key {
  ok draft.password
  return hash_password(draft.password draft.password_salt)
}

# the user model: the definition of a user
model user {
  # this config makes the model only ever return a single document
  singular_mode true
  
  # expected content in a document on this model
  schema {
    id primary_key immutable computed("random_uuid")
    username string unique index
    password string minlen(8) virtual
    password_salt string len(32) hidden computed("password_salt")
    password_hash string len(32) hidden computed("password_hash")
  }
  
  # access control allowing reads/writes to user's own document
  allow {
    equal doc.id userctx.id
  }
}

# api authentication using basic auth and the user model
authenticate {
  var auth parse_basic_auth(headers.authorization)
  var user fetch_by_index("user" "username" auth.user)
  equal user.password_hash hash_password(auth.pass user.password_salt)
  return user
}